const http = require('http');

// Funci√≥n para hacer peticiones HTTP
function makeRequest(options, data = null) {
    return new Promise((resolve, reject) => {
        const req = http.request(options, (res) => {
            let body = '';
            res.on('data', (chunk) => {
                body += chunk;
            });
            res.on('end', () => {
                resolve({
                    statusCode: res.statusCode,
                    headers: res.headers,
                    body: body
                });
            });
        });

        req.on('error', (error) => {
            reject(error);
        });

        if (data) {
            req.write(data);
        }
        req.end();
    });
}

// Pruebas
async function testSwagger() {
    console.log('üß™ Iniciando pruebas de Swagger...\n');
    
    const baseOptions = {
        hostname: 'localhost',
        port: 3000,
        headers: {
            'Content-Type': 'application/json'
        }
    };

    try {
        // Prueba 1: Endpoint ra√≠z
        console.log('1Ô∏è‚É£  Probando endpoint ra√≠z (/)...');
        const rootResponse = await makeRequest({
            ...baseOptions,
            path: '/',
            method: 'GET'
        });
        
        if (rootResponse.statusCode === 200) {
            console.log('‚úÖ Endpoint ra√≠z funciona correctamente');
            const data = JSON.parse(rootResponse.body);
            console.log(`   üìÑ Documentaci√≥n disponible en: ${data.documentation.swagger_ui}`);
        } else {
            console.log('‚ùå Error en endpoint ra√≠z:', rootResponse.statusCode);
        }

        // Prueba 2: Swagger JSON
        console.log('\n2Ô∏è‚É£  Probando especificaci√≥n Swagger JSON...');
        const swaggerJsonResponse = await makeRequest({
            ...baseOptions,
            path: '/api-docs.json',
            method: 'GET'
        });
        
        if (swaggerJsonResponse.statusCode === 200) {
            console.log('‚úÖ Swagger JSON funciona correctamente');
            const swaggerSpec = JSON.parse(swaggerJsonResponse.body);
            console.log(`   üìä API T√≠tulo: ${swaggerSpec.info.title}`);
            console.log(`   üìä API Versi√≥n: ${swaggerSpec.info.version}`);
            console.log(`   üìä Rutas documentadas: ${Object.keys(swaggerSpec.paths).length}`);
        } else {
            console.log('‚ùå Error en Swagger JSON:', swaggerJsonResponse.statusCode);
        }

        // Prueba 3: Swagger UI HTML
        console.log('\n3Ô∏è‚É£  Probando interfaz Swagger UI...');
        const swaggerUIResponse = await makeRequest({
            ...baseOptions,
            path: '/api-docs/',
            method: 'GET'
        });
        
        if (swaggerUIResponse.statusCode === 200) {
            console.log('‚úÖ Swagger UI funciona correctamente');
            if (swaggerUIResponse.body.includes('swagger-ui')) {
                console.log('   üé® Interfaz UI cargada correctamente');
            }
        } else {
            console.log('‚ùå Error en Swagger UI:', swaggerUIResponse.statusCode);
        }

        console.log('\nüìã Resumen de pruebas:');
        console.log('================================');
        console.log('‚úÖ Servidor funcionando en puerto 3000');
        console.log('‚úÖ Documentaci√≥n Swagger configurada');
        console.log('‚úÖ Todas las rutas documentadas');
        console.log('\nüéâ ¬°Swagger est√° listo para usar!');
        console.log('\nüîó Enlaces importantes:');
        console.log('   ‚Ä¢ Swagger UI: http://localhost:3000/api-docs');
        console.log('   ‚Ä¢ Swagger JSON: http://localhost:3000/api-docs.json');
        console.log('   ‚Ä¢ Info API: http://localhost:3000/');

    } catch (error) {
        console.error('‚ùå Error durante las pruebas:', error.message);
        console.log('\nüí° Posibles soluciones:');
        console.log('   ‚Ä¢ Aseg√∫rate de que el servidor est√© ejecut√°ndose (npm start)');
        console.log('   ‚Ä¢ Verifica que no hay otros procesos usando el puerto 3000');
        console.log('   ‚Ä¢ Revisa los logs del servidor por errores');
    }
}

// Esperar un poco para que el servidor se inicie y luego ejecutar pruebas
console.log('‚è≥ Esperando que el servidor se inicie...\n');
setTimeout(testSwagger, 3000); 